<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: code-gems | yield the dog]]></title>
  <link href="http://yieldthedog.github.com/blog/categories/code-gems/atom.xml" rel="self"/>
  <link href="http://yieldthedog.github.com/"/>
  <updated>2013-04-25T22:54:16+02:00</updated>
  <id>http://yieldthedog.github.com/</id>
  <author>
    <name><![CDATA[yield the dog]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[C# code gems #2 - Abstractions via Strings]]></title>
    <link href="http://yieldthedog.github.com/blog/2012/03/17/c-number-code-gems-number-2-abstractions-via-strings/"/>
    <updated>2012-03-17T10:06:00+01:00</updated>
    <id>http://yieldthedog.github.com/blog/2012/03/17/c-number-code-gems-number-2-abstractions-via-strings</id>
    <content type="html"><![CDATA[<p>In .NET we have the concept of connection strings which are some weird non consistent bunch of key value pairs, with colons mixed in highly dependent of the DB driver used. To get an overview how such connection strings may look like head over to <a href="http://connectionstrings.com">Connection Strings.com</a>.</p>

<p>For example a MS SQL Server 2008 connection string looks somehow like this</p>

<pre><code>Data Source=myServerAddress;Initial Catalog=myDataBase;User Id=myUsername;Password=myPassword;
</code></pre>

<p>A MySQL connection string may be similar to this</p>

<pre><code>Server=myServerAddress;Database=myDataBase;Uid=myUsername;Pwd=myPassword;
</code></pre>

<p>So constructing a connection string is somehow a pain (thank you so much dear "Connection Strings.com") but there's a class that eases connection string creation in code for MS SQL Server, it's "SqlConnectionStringBuilder".</p>

<p>Let's look at a piece of code to construct a connection string similar to the MS SQL Server 2008 connection string given above.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">var</span> <span class="n">builder</span> <span class="p">=</span> <span class="k">new</span> <span class="n">SqlConnectionStringBuilder</span><span class="p">&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">pre</span><span class="p">&gt;&lt;</span><span class="n">code</span><span class="p">&gt;</span>    <span class="p">{</span>
</span><span class='line'>        <span class="n">DataSource</span> <span class="p">=</span> <span class="s">&quot;myServerAddress&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="n">InitialCatalog</span> <span class="p">=</span> <span class="s">&quot;myDataBase&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="n">UserID</span> <span class="p">=</span> <span class="s">&quot;myUsername&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="n">Password</span> <span class="p">=</span> <span class="s">&quot;myPassword&quot;</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'><span class="p">&lt;/</span><span class="n">code</span><span class="p">&gt;&lt;/</span><span class="n">pre</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;</span><span class="n">var</span> <span class="n">conn</span> <span class="p">=</span> <span class="k">new</span> <span class="n">SqlConnection</span><span class="p">(</span><span class="n">builder</span><span class="p">.</span><span class="n">ToString</span><span class="p">());</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>So what builder does is to create a string that is then parsed by SqlConnection to connect to the DB. Does this abstract anything? Not really because you have to know what builder to use with what Connection class. With what interface do these classes communicate? The good old string :)</p>

<p>Do I have a better idea to model this? No not really...</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C# Code gems #1 - Static and Generics]]></title>
    <link href="http://yieldthedog.github.com/blog/2012/03/16/c-number-code-gems-number-1-static-and-generics/"/>
    <updated>2012-03-16T17:52:00+01:00</updated>
    <id>http://yieldthedog.github.com/blog/2012/03/16/c-number-code-gems-number-1-static-and-generics</id>
    <content type="html"><![CDATA[<p>C# got it's generics support in version 2.0. While first I thought generics would be some kind of syntax sugar, which they are, and not really important for the language; now some years later I would refuse to write C# code without the power of generics.</p>

<p>When implementing generics in a strong typed language, the language designers have two options to implement generics. The first is a <strong>runtime</strong> approach, where all operations on generic types are checked by the compiler at compile time and the compiler inserts cast statements in the IL code/byte code. In pseudo code this code fragment</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="p">&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">pre</span><span class="p">&gt;&lt;</span><span class="n">code</span><span class="p">&gt;</span><span class="n">List</span><span class="p">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">String</span><span class="p">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">strings</span> <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">String</span><span class="p">&amp;</span><span class="n">gt</span><span class="p">;();</span>
</span><span class='line'><span class="n">strings</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="s">&quot;SomeString&quot;</span><span class="p">);</span>
</span><span class='line'><span class="n">String</span> <span class="n">someString</span> <span class="p">=</span> <span class="n">strings</span><span class="p">[</span><span class="m">0</span><span class="p">];</span>
</span><span class='line'><span class="p">&lt;/</span><span class="n">code</span><span class="p">&gt;&lt;/</span><span class="n">pre</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Is translated to that code fragment by the compiler:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="p">&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">pre</span><span class="p">&gt;&lt;</span><span class="n">code</span><span class="p">&gt;</span><span class="n">List</span> <span class="n">strings</span> <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">();</span>
</span><span class='line'><span class="n">strings</span><span class="p">.</span><span class="n">Add</span><span class="p">((</span><span class="n">String</span><span class="p">)</span><span class="s">&quot;SomeString&quot;</span><span class="p">);</span>
</span><span class='line'><span class="n">String</span> <span class="n">someString</span> <span class="p">=</span> <span class="p">(</span><span class="n">String</span><span class="p">)</span><span class="n">strings</span><span class="p">[</span><span class="m">0</span><span class="p">]:</span>
</span><span class='line'><span class="p">&lt;/</span><span class="n">code</span><span class="p">&gt;&lt;/</span><span class="n">pre</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The other approach to implement generics is a <strong>compile</strong> time approach where the compiler creates dedicated sub classes for each generic reference. That means the compiler would create a sub class of List for a <code>List&lt;String&gt;</code> and a <code>List&lt;int&gt;</code> and so on. The compiler created sub classes derive from <code>List&lt;T&gt;</code> but a <code>List&lt;int&gt;</code> cannot be assigned to a <code>List&lt;String&gt;</code>. More general even for class B that derives from A a <code>List&lt;B&gt;</code> could not be assigned to a <code>List&lt;A&gt;</code> reference!</p>

<p>C# and C++ took the <strong>compile</strong> time approach, Java for example took the <strong>runtime</strong> approach. While the <strong>compile</strong> time approach has some performance benefits compared to the <strong>runtime</strong> approach, the runtime approach is more flexible and does not lead to the awkwardness that I want to demonstrate now.</p>

<p>What would you expect the following code to output?</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">Counter</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span>
</span><span class='line'><span class="p">{&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">pre</span><span class="p">&gt;&lt;</span><span class="n">code</span><span class="p">&gt;</span><span class="k">private</span> <span class="k">static</span> <span class="kt">int</span> <span class="n">Count</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="kt">int</span> <span class="nf">Increase</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">Count</span><span class="p">+=</span><span class="m">1</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">Count</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="p">&lt;/</span><span class="n">code</span><span class="p">&gt;&lt;/</span><span class="n">pre</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;}&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;</span><span class="k">private</span> <span class="k">static</span> <span class="k">void</span> <span class="n">IncreaseCounters</span><span class="p">()</span>
</span><span class='line'><span class="p">{&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">pre</span><span class="p">&gt;&lt;</span><span class="n">code</span><span class="p">&gt;</span><span class="n">var</span> <span class="n">intCounter</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Counter</span><span class="p">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="kt">int</span><span class="p">&amp;</span><span class="n">gt</span><span class="p">;();</span>
</span><span class='line'><span class="n">var</span> <span class="n">longCounter</span><span class="p">=</span> <span class="k">new</span> <span class="n">Counter</span><span class="p">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="kt">long</span><span class="p">&amp;</span><span class="n">gt</span><span class="p">;();</span>
</span><span class='line'>
</span><span class='line'><span class="n">var</span> <span class="n">firstCount</span> <span class="p">=</span> <span class="n">intCounter</span><span class="p">.</span><span class="n">Increase</span><span class="p">();</span>
</span><span class='line'><span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;FirstCount {0}&quot;</span><span class="p">,</span> <span class="n">firstCount</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">var</span> <span class="n">secondCount</span> <span class="p">=</span> <span class="n">longCounter</span><span class="p">.</span><span class="n">Increase</span><span class="p">();</span>
</span><span class='line'><span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;SecondCount {0}&quot;</span><span class="p">,</span> <span class="n">secondCount</span><span class="p">);</span>
</span><span class='line'><span class="p">&lt;/</span><span class="n">code</span><span class="p">&gt;&lt;/</span><span class="n">pre</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;}&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>But the output is:</p>

<pre><code>FirstCount 1
SecondCount 1
</code></pre>

<p>As stated above, the C# compiler generates two classes for the <strong>Counter</strong> class, one class <strong>Counter<int></strong> and one <strong>Counter<long></strong> class. These two classes do not share the same static <strong>Count</strong> field and so the consequence is that you have one <strong>Count</strong> field in your code but get two static fields created by the compiler.</p>
]]></content>
  </entry>
  
</feed>
